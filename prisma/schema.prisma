// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// ENUMS
// =============================================

enum UserRole {
  CLIENT
  EXPERT
  ADMIN
}

// =============================================
// USERS & AUTHENTICATION
// =============================================

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  passwordHash      String?
  role              String    @default("CLIENT") // CLIENT, EXPERT, ADMIN
  profileComplete   Boolean   @default(false)
  emailVerified     DateTime?
  resetToken        String?
  resetTokenExpiry  DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  clientProfile ClientProfile?
  expertProfile ExpertProfile?
  accounts      Account[]
  sessions      Session[]

  @@map("User")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

// =============================================
// USER PROFILES
// =============================================

model ClientProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  companyName String
  industry    String?
  description String   @default("")
  website     String?
  companySize String?
  location    String?
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ClientProfile")
}

model ExpertProfile {
  id                 String   @id @default(cuid())
  userId             String   @unique
  firstName          String
  lastName           String
  bio                String   @default("")
  expertise          String?
  yearsExperience    String?
  hourlyRate         Decimal? @db.Decimal(10,2)
  location           String?
  phone              String?
  website            String?
  linkedIn           String?
  verificationStatus String   @default("PENDING") // PENDING, BASIC, PREMIUM, CERTIFIED
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ExpertProfile")
}
